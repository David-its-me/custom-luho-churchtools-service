from io import TextIOWrapper
import os
import re

'''
#############################################################################################
### Execute this script to autogenerate all the python files from google protocol buffers.###
#############################################################################################
'''

# The path to your .proto definition files.
proto_path: str = '../ProPresenter7-Proto/proto/'

# The path to your autogenerated files.
python_out_path: str = 'src/propresenter/pb_auto_generated/'

# Absolute import path which will added to the imports
absolute_import_path: str = 'propresenter.pb_auto_generated'


def generate_files():
    for filename in os.listdir(proto_path):
        if filename.endswith(".proto"):
            protoc_command = 'protoc {} --proto_path="{}" --python_out="{}"'.format(filename, proto_path, python_out_path)
            os.system(protoc_command) 
            protoc_pyi_command = 'protoc {} --proto_path="{}" --pyi_out="{}"'.format(filename, proto_path, python_out_path)
            os.system(protoc_pyi_command) 

def rename_imports_in_line(line: str) -> str:
    if line.startswith('import'):
        # Add a . in front of all import statements to make the imports relative.
        return re.sub(r'import (.*)_pb', 'import {}.{}'.format(absolute_import_path, r'\1_pb'), line)
    else:
        return line 
    

def rename_imports_to_relative_paths():
    for filename in os.listdir(python_out_path):
        if filename.endswith(".py") or filename.endswith(".pyi"):
            with open('{}{}'.format(python_out_path, filename), 'r+') as file:
                new_file_content = list(map(lambda line: rename_imports_in_line(line), file))
                file.seek(0)
                file.writelines(new_file_content)
                file.truncate()


generate_files()
rename_imports_to_relative_paths()


