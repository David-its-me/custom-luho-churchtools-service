from propresenter.pb_auto_generated.cue_pb2 import Cue
from propresenter.pb_auto_generated.action_pb2 import Action
from propresenter.pb_auto_generated.slide_pb2 import Slide
from propresenter.pb_auto_generated.basicTypes_pb2 import Color, UUID
from propresenter.pb_auto_generated.presentationSlide_pb2 import PresentationSlide
from propresenter.pb_auto_generated.presentation_pb2 import Presentation
from propresenter.pb_auto_generated.groups_pb2 import Group
from propresenter.presentation_builder.uuid_builder import generate_random_uuid, uuid_zero


def __createSlideAction(slide: Slide) -> Action:
    action = Action(
        delay_time=0.0,
        duration=0.0,
        isEnabled=True,
        uuid=generate_random_uuid(),
        slide=Action.SlideType(
            presentation=PresentationSlide(
                base_slide=slide,
            ),
            
        ),
        type=Action.ACTION_TYPE_PRESENTATION_SLIDE,

    )
    return action

def generate_cue_group_from_cues(cues: list[Cue]) -> Presentation.CueGroup:
    cue_group = Presentation.CueGroup(
        group=Group(
            # Label all the autogenerated slides with turquoise color
            color=Color(
                red=40.0/255.0, 
                green=200.0/255.0, 
                blue=150.0/255.0,
                alpha=1
            ),
            name="test_cue_group",
            uuid=generate_random_uuid(),
        ),

        cue_identifiers=list(map(lambda cue: cue.uuid, cues))
    )
    return cue_group

def createCue(slide: Slide, completion_time: float = 0.0) -> Cue:
    cue = Cue(uuid = generate_random_uuid(),
        actions=[__createSlideAction(slide=slide)],
        completion_target_uuid=uuid_zero(),
        completion_action_uuid=uuid_zero(),
        isEnabled=True
    )
    if completion_time > 0:
        # Here you can set an individual time for a slide
        cue.completion_action_type=Cue.CompletionActionType.COMPLETION_ACTION_TYPE_AFTER_TIME
        #completion_action_type=Cue.CompletionActionType.COMPLETION_ACTION_TYPE_LAST,
        cue.completion_target_type=Cue.CompletionTargetType.COMPLETION_TARGET_TYPE_NEXT
        cue.completion_time = completion_time
    
    # TODO: Makros

    return cue
